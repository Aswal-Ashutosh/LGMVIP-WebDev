{"version":3,"sources":["services/firebase.js","services/secret.js","components/admin_login_form/AdminLoginForm.jsx","components/navbar/Navbar.jsx","pages/home_page/HomePage.jsx","components/pop_up/PopUp.jsx","components/class_form/ClassForm.jsx","components/class_card/ClassCard.jsx","pages/admin_panel/AdminPanel.jsx","pages/result_page/Result.jsx","components/subject_form/StudentFrom.jsx","components/student_card/StudentCard.jsx","pages/class_panel/ClassPanel.jsx","App.jsx","index.js"],"names":["firebaseApp","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseAuth","getAuth","firestore","getFirestore","signIn","email","password","a","signInWithEmailAndPassword","catch","e","signUp","createUserWithEmailAndPassword","signOutRms","signOut","alert","userExist","currentUser","generateCollegeID","availableIdRef","doc","getDoc","docSnap","collegeID","data","id","updateDoc","registerCollege","adminEmail","college","adminRef","setDoc","collegeRef","toString","getCollegeID","docRef","getCollegeName","createClass","className","subjects","isClassNameUnique","exists","isUniqueRollNumber","rollNumber","getSubjects","addStudent","studentName","studentRollNumber","subjectsWithMarks","studentDocRef","studentDetailDocRef","parseInt","message","getResult","collegeName","resultDocRef","resultSnap","result","studentMarks","isValidCollegeID","isValidRollNumber","AdminLoginForm","props","state","emailInput","passwordInput","collegeInput","collegeIDInput","rollNumberInput","toggleButtonId","alertMessage","error","loading","handleEmailInput","bind","handlePasswordInput","handleCollegeInput","handleCollegeIDInput","handleRollNumberInput","handleSingIn","handleSingUp","handleGetResult","handleToggleButtonChange","event","this","setState","target","value","clearAlert","length","showAlert","validateEmailAndPassword","then","history","push","code","validateCollege","validateStudentDetails","onClick","ToggleButtonGroup","color","exclusive","onChange","ToggleButton","type","placeholder","renderButton","Box","sx","marginTop","LinearProgress","Alert","severity","margin","React","Component","Navbar","heading","subHeading","button","text","HomePage","useHistory","PopUp","closePopUp","children","ClassForm","subjectName","totalMarks","classRelatedError","classErrorMessage","subjectRelatedError","subjectErrorMessage","processing","addSubject","deleteSubject","handleSubjectNameInput","handleSubjectMarksInput","handleClassNameInput","handleOnSubmit","prevState","index","name","splice","marks","isNaN","map","subject","max","min","removePrevError","i","validateForm","required","marginBottom","renderSubjects","ClassCard","AdminPanel","popUp","classes","unsubscribe","togglePopUp","onSnapshot","collection","snapshot","docs","forEach","withRouter","Result","useState","setResult","location","useLocation","totalObtainedMarks","useEffect","getStudentDetails","CircularProgress","marksScored","toFixed","StudentForm","studentRelatedError","marksRelatedError","studentRelatedErrorMessage","marksRelatedErrorMessage","handleStudentNameInput","handleStudentRollNumberInput","readOnly","StudentCard","ClassPanel","students","student","App","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fcd22e63.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport {\r\n  getAuth,\r\n  signOut,\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n} from \"firebase/auth\";\r\nimport {\r\n  getFirestore,\r\n  doc,\r\n  getDoc,\r\n  setDoc,\r\n  updateDoc,\r\n} from \"firebase/firestore\";\r\nimport { firebaseConfig } from \"../services/secret\";\r\n\r\n// INITIALIZATIONS\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nexport const firebaseAuth = getAuth(firebaseApp);\r\n\r\nexport const firestore = getFirestore(firebaseApp);\r\n\r\n//FIREBASE AUTHENTICATION RELATED FUNCTIONS\r\nexport const signIn = async function (email, password) {\r\n  await signInWithEmailAndPassword(firebaseAuth, email, password).catch((e) => {\r\n    throw e;\r\n  });\r\n};\r\n\r\nexport const signUp = async function (email, password) {\r\n  await createUserWithEmailAndPassword(firebaseAuth, email, password).catch(\r\n    (e) => {\r\n      throw e;\r\n    }\r\n  );\r\n};\r\n\r\nexport const signOutRms = async function () {\r\n  try {\r\n    await signOut(firebaseAuth);\r\n  } catch (e) {\r\n    alert(\"Error: signOutRms\");\r\n  }\r\n};\r\n\r\nexport const userExist = function () {\r\n  return firebaseAuth.currentUser !== null;\r\n};\r\n\r\nexport const currentUserEmail = function () {\r\n  return firebaseAuth.currentUser.email;\r\n};\r\n\r\n//FIRESTORE RELATED DATA AND FUNCTIONS\r\nasync function generateCollegeID() {\r\n  try {\r\n    const availableIdRef = doc(firestore, \"available-id\", \"id-number\");\r\n    const docSnap = await getDoc(availableIdRef);\r\n    const collegeID = docSnap.data().id;\r\n    await updateDoc(availableIdRef, { id: collegeID + 1 });\r\n    return collegeID;\r\n  } catch (e) {\r\n    alert(\"Error: generateCollegeID\");\r\n  }\r\n}\r\n\r\nexport const registerCollege = async function (adminEmail, college) {\r\n  try {\r\n    //Generate unique id for college\r\n    const collegeID = await generateCollegeID();\r\n\r\n    //Add admin's email to admin collection\r\n    const adminRef = doc(firestore, \"admin\", adminEmail);\r\n    await setDoc(adminRef, { \"alloted-college-id\": collegeID });\r\n\r\n    //Add collegeId to college collection\r\n    const collegeRef = doc(firestore, \"college\", collegeID.toString());\r\n    await setDoc(collegeRef, { \"college-name\": college });\r\n  } catch (e) {\r\n    alert(\"Error: registerCollege\");\r\n  }\r\n};\r\n\r\nexport const getCollegeID = async function (adminEmail) {\r\n  try {\r\n    const docRef = doc(firestore, \"admin\", adminEmail);\r\n    const docSnap = await getDoc(docRef);\r\n    return docSnap.data()[\"alloted-college-id\"];\r\n  } catch (e) {\r\n    alert(\"Error: getCollegeID\");\r\n  }\r\n};\r\n\r\nexport const getCollegeName = async function (collegeID) {\r\n  try {\r\n    const docRef = doc(firestore, \"college\", collegeID.toString());\r\n    const docSnap = await getDoc(docRef);\r\n    return docSnap.data()[\"college-name\"];\r\n  } catch (e) {\r\n    alert(\"Error: getCollegeName\");\r\n  }\r\n};\r\n\r\nexport const createClass = async function (collegeID, className, subjects) {\r\n  try {\r\n    const docRef = doc(\r\n      firestore,\r\n      \"college\",\r\n      collegeID.toString(),\r\n      \"classes\",\r\n      className\r\n    );\r\n    await setDoc(docRef, { \"class-name\": className, subjects: subjects });\r\n  } catch (e) {\r\n    alert(\"Error: createClass\");\r\n  }\r\n};\r\n\r\nexport const isClassNameUnique = async function (className, collegeID) {\r\n  try {\r\n    const docRef = doc(\r\n      firestore,\r\n      \"college\",\r\n      collegeID.toString(),\r\n      \"classes\",\r\n      className\r\n    );\r\n    const docSnap = await getDoc(docRef);\r\n    return !docSnap.exists();\r\n  } catch (e) {\r\n    alert(\"Error: isClassNameUnique\");\r\n  }\r\n};\r\n\r\nexport const isUniqueRollNumber = async function (collegeID, rollNumber) {\r\n  try {\r\n    const docRef = doc(\r\n      firestore,\r\n      \"college\",\r\n      collegeID.toString(),\r\n      \"students\",\r\n      rollNumber\r\n    );\r\n    const docSnap = await getDoc(docRef);\r\n    return !docSnap.exists();\r\n  } catch (e) {\r\n    alert(\"Error: isUniqueRollNumber\");\r\n  }\r\n};\r\n\r\nexport const getSubjects = async function (className, collegeID) {\r\n  try {\r\n    const docRef = doc(\r\n      firestore,\r\n      \"college\",\r\n      collegeID.toString(),\r\n      \"classes\",\r\n      className\r\n    );\r\n    const docSnap = await getDoc(docRef);\r\n    const subjects = docSnap.data().subjects;\r\n    return subjects;\r\n  } catch (e) {\r\n    alert(\"Error: getSubjects\");\r\n  }\r\n};\r\n\r\nexport const addStudent = async function (\r\n  className,\r\n  collegeID,\r\n  studentName,\r\n  studentRollNumber,\r\n  subjectsWithMarks\r\n) {\r\n  try {\r\n    //Add student to college/collegeID/students\r\n    const studentDocRef = doc(\r\n      firestore,\r\n      \"college\",\r\n      collegeID.toString(),\r\n      \"students\",\r\n      studentRollNumber\r\n    );\r\n\r\n    await setDoc(studentDocRef, { \"enrolled-class\": className });\r\n\r\n    //Add student subject details to college/collegeID/classes/className\r\n    const studentDetailDocRef = doc(\r\n      firestore,\r\n      \"college\",\r\n      collegeID.toString(),\r\n      \"classes\",\r\n      className,\r\n      \"enrolled-students\",\r\n      studentRollNumber\r\n    );\r\n    await setDoc(studentDetailDocRef, {\r\n      \"student-name\": studentName,\r\n      \"student-roll-no\": parseInt(studentRollNumber),\r\n      \"student-marks\": subjectsWithMarks,\r\n    });\r\n  } catch (e) {\r\n    alert(\"Error: addStudent  \" + e.message);\r\n  }\r\n};\r\n\r\nexport const getResult = async function (collegeID, rollNumber) {\r\n  try {\r\n    const collegeName = await getCollegeName(collegeID);\r\n\r\n    const studentDocRef = doc(\r\n      firestore,\r\n      \"college\",\r\n      collegeID.toString(),\r\n      \"students\",\r\n      rollNumber.toString()\r\n    );\r\n\r\n    const className = (await getDoc(studentDocRef)).data()[\"enrolled-class\"];\r\n\r\n    const resultDocRef = doc(\r\n      firestore,\r\n      \"college\",\r\n      collegeID.toString(),\r\n      \"classes\",\r\n      className,\r\n      \"enrolled-students\",\r\n      rollNumber.toString()\r\n    );\r\n\r\n    const resultSnap = await getDoc(resultDocRef);\r\n    const result = resultSnap.data();\r\n\r\n    return {\r\n      collegeName: collegeName,\r\n      className: className,\r\n      studentName: result[\"student-name\"],\r\n      studentRollNumber: result[\"student-roll-no\"],\r\n      studentMarks: result[\"student-marks\"],\r\n    };\r\n  } catch (e) {\r\n    alert(\"Error: getResult\");\r\n  }\r\n};\r\n\r\nexport const isValidCollegeID = async function (collegeID) {\r\n  try {\r\n    const docRef = doc(firestore, \"college\", collegeID.toString());\r\n    const docSnap = await getDoc(docRef);\r\n    return docSnap.exists();\r\n  } catch (e) {\r\n    alert(\"Error: isValidCollegeID\");\r\n  }\r\n};\r\n\r\nexport const isValidRollNumber = async function (collegeID, rollNumber) {\r\n  try {\r\n    const docRef = doc(\r\n      firestore,\r\n      \"college\",\r\n      collegeID.toString(),\r\n      \"students\",\r\n      rollNumber.toString()\r\n    );\r\n    const docSnap = await getDoc(docRef);\r\n    return docSnap.exists();\r\n  } catch (e) {\r\n    alert(\"Error: isValidRollNumber\");\r\n  }\r\n};\r\n","export const firebaseConfig = {\r\n  apiKey: \"AIzaSyAaoess__c4q-VWE_xx-X_vK7q4I1RCs0U\",\r\n  authDomain: \"result-management-system-442e4.firebaseapp.com\",\r\n  projectId: \"result-management-system-442e4\",\r\n  storageBucket: \"result-management-system-442e4.appspot.com\",\r\n  messagingSenderId: \"851697863963\",\r\n  appId: \"1:851697863963:web:ffde3c69ea0c7651e757be\",\r\n  measurementId: \"G-9EK05TKWNG\",\r\n};\r\n","import React from \"react\";\r\nimport \"../admin_login_form/AdminLoginForm.css\";\r\nimport {\r\n  signIn,\r\n  signUp,\r\n  registerCollege,\r\n  isValidCollegeID,\r\n  isValidRollNumber,\r\n} from \"../../services/firebase.js\";\r\nimport Box from \"@mui/material/Box\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport ToggleButton from \"@mui/material/ToggleButton\";\r\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\r\nimport { Alert } from \"@mui/material\";\r\n\r\nclass AdminLoginForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      emailInput: \"\",\r\n      passwordInput: \"\",\r\n      collegeInput: \"\",\r\n      collegeIDInput: \"\",\r\n      rollNumberInput: \"\",\r\n      toggleButtonId: \"sign_in\",\r\n      alertMessage: \"\",\r\n      alert: false,\r\n      error: false,\r\n      loading: false,\r\n    };\r\n\r\n    this.handleEmailInput = this.handleEmailInput.bind(this);\r\n    this.handlePasswordInput = this.handlePasswordInput.bind(this);\r\n    this.handleCollegeInput = this.handleCollegeInput.bind(this);\r\n    this.handleCollegeIDInput = this.handleCollegeIDInput.bind(this);\r\n    this.handleRollNumberInput = this.handleRollNumberInput.bind(this);\r\n    this.handleSingIn = this.handleSingIn.bind(this);\r\n    this.handleSingUp = this.handleSingUp.bind(this);\r\n    this.handleGetResult = this.handleGetResult.bind(this);\r\n    this.handleToggleButtonChange = this.handleToggleButtonChange.bind(this);\r\n  }\r\n\r\n  handleEmailInput(event) {\r\n    this.setState({ emailInput: event.target.value });\r\n  }\r\n\r\n  handlePasswordInput(event) {\r\n    this.setState({ passwordInput: event.target.value });\r\n  }\r\n\r\n  handleCollegeIDInput(event) {\r\n    this.setState({ collegeIDInput: event.target.value });\r\n  }\r\n\r\n  handleRollNumberInput(event) {\r\n    this.setState({ rollNumberInput: event.target.value });\r\n  }\r\n\r\n  handleToggleButtonChange(event) {\r\n    this.setState({ toggleButtonId: event.target.value });\r\n    this.clearAlert();\r\n  }\r\n\r\n  handleCollegeInput(event) {\r\n    this.setState({ collegeInput: event.target.value });\r\n  }\r\n\r\n  clearAlert() {\r\n    this.setState({ alert: false });\r\n  }\r\n\r\n  showAlert(message, error = true) {\r\n    this.setState({ alert: true, error: error, alertMessage: message });\r\n  }\r\n\r\n  validateEmailAndPassword() {\r\n    if (\r\n      this.state.emailInput.length !== 0 &&\r\n      this.state.passwordInput.length !== 0\r\n    )\r\n      return true;\r\n\r\n    if (this.state.emailInput.length === 0)\r\n      this.showAlert(\"Email can't be empty!\");\r\n    else if (this.state.passwordInput.length === 0)\r\n      this.showAlert(\"Password can't be empty!\");\r\n    return false;\r\n  }\r\n\r\n  validateCollege() {\r\n    if (this.state.collegeInput.length !== 0) return true;\r\n    this.showAlert(\"College name can't be empty!\");\r\n    return false;\r\n  }\r\n\r\n  async handleSingIn() {\r\n    this.clearAlert();\r\n    this.setState({ loading: true });\r\n\r\n    if (this.validateEmailAndPassword()) {\r\n      await signIn(this.state.emailInput, this.state.passwordInput)\r\n        .then(() => {\r\n          this.setState({ loading: false, emailInput: \"\", passwordInput: \"\" });\r\n          this.showAlert(\"Signed In.\", false);\r\n          this.props.history.push(\"/adminPanel\");\r\n        })\r\n        .catch((error) => {\r\n          this.setState({ loading: false });\r\n          switch (error.code) {\r\n            case \"auth/invalid-email\":\r\n              this.showAlert(\"Invalid email!\");\r\n              break;\r\n            case \"auth/wrong-password\":\r\n              this.showAlert(\"Wrong password!\");\r\n              break;\r\n            case \"auth/user-not-found\":\r\n              this.showAlert(\"User not found!\");\r\n              break;\r\n            default:\r\n              alert(error.message);\r\n              this.showAlert(\"Something went wrong!\");\r\n          }\r\n        });\r\n    } else {\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n\r\n  async handleSingUp() {\r\n    this.clearAlert();\r\n    this.setState({ loading: true });\r\n\r\n    if (this.validateEmailAndPassword() && this.validateCollege()) {\r\n      await signUp(this.state.emailInput, this.state.passwordInput)\r\n        .then(async () => {\r\n          await registerCollege(this.state.emailInput, this.state.collegeInput);\r\n          this.setState({\r\n            emailInput: \"\",\r\n            passwordInput: \"\",\r\n            collegeInput: \"\",\r\n            loading: false,\r\n          });\r\n          this.showAlert(\"Account created successfully.\", false);\r\n        })\r\n        .catch((error) => {\r\n          this.setState({ loading: false });\r\n          switch (error.code) {\r\n            case \"auth/invalid-email\":\r\n              this.showAlert(\"Invalid email!\");\r\n              break;\r\n            case \"auth/email-already-in-use\":\r\n              this.showAlert(\"Email already in use!\");\r\n              break;\r\n            case \"auth/weak-password\":\r\n              this.showAlert(\"Password must be 6 characters long!\");\r\n              break;\r\n            default:\r\n              alert(error.message);\r\n              this.showAlert(\"Something went wrong!\");\r\n          }\r\n        });\r\n    } else {\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n\r\n  async validateStudentDetails() {\r\n    if (this.state.collegeIDInput.length === 0) {\r\n      this.showAlert(\"College ID can't be empty!\");\r\n      return false;\r\n    }\r\n\r\n    if (this.state.rollNumberInput.length === 0) {\r\n      this.showAlert(\"Roll Number can't be empty!\");\r\n      return false;\r\n    }\r\n\r\n    if (!(await isValidCollegeID(this.state.collegeIDInput))) {\r\n      this.showAlert(\"Provided college ID doesn't exist!\");\r\n      return false;\r\n    }\r\n\r\n    if (\r\n      !(await isValidRollNumber(\r\n        this.state.collegeIDInput,\r\n        this.state.rollNumberInput\r\n      ))\r\n    ) {\r\n      this.showAlert(\"Wrong Roll Number!\");\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  async handleGetResult() {\r\n    this.setState({ loading: true });\r\n    if (await this.validateStudentDetails()) {\r\n      this.setState({ loading: false, alert: false });\r\n      this.props.history.push(\"/studentResult\", {\r\n        collegeID: this.state.collegeIDInput,\r\n        rollNumber: this.state.rollNumberInput,\r\n      });\r\n    }\r\n    this.setState({ loading: false });\r\n  }\r\n\r\n  renderButton(id) {\r\n    switch (id) {\r\n      case \"sign_in\":\r\n        return (\r\n          <button className=\"formBtn\" onClick={this.handleSingIn}>\r\n            Sign In\r\n          </button>\r\n        );\r\n      case \"sign_up\":\r\n        return (\r\n          <button className=\"formBtn\" onClick={this.handleSingUp}>\r\n            Sign Up\r\n          </button>\r\n        );\r\n      default:\r\n        return (\r\n          <button className=\"formBtn\" onClick={this.handleGetResult}>\r\n            Get Result\r\n          </button>\r\n        );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"AdminFormContainer\">\r\n        <h1>Welcome</h1>\r\n        <ToggleButtonGroup\r\n          color=\"primary\"\r\n          value={this.state.toggleButtonId}\r\n          exclusive\r\n          onChange={this.handleToggleButtonChange}\r\n        >\r\n          <ToggleButton value=\"sign_in\">Sign In</ToggleButton>\r\n          <ToggleButton value=\"sign_up\">Sign Up</ToggleButton>\r\n          <ToggleButton value=\"students\">Students</ToggleButton>\r\n        </ToggleButtonGroup>\r\n        <div className=\"LoginForm\">\r\n          {this.state.toggleButtonId !== \"students\" ? (\r\n            <div>\r\n              {this.state.toggleButtonId === \"sign_up\" ? (\r\n                <input\r\n                  id=\"collegeInput\"\r\n                  type=\"text\"\r\n                  value={this.state.collegeInput}\r\n                  onChange={this.handleCollegeInput}\r\n                  placeholder=\"College Name\"\r\n                />\r\n              ) : null}\r\n              <input\r\n                type=\"text\"\r\n                value={this.state.emailInput}\r\n                onChange={this.handleEmailInput}\r\n                placeholder=\"Enter your email\"\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                value={this.state.passwordInput}\r\n                onChange={this.handlePasswordInput}\r\n                placeholder=\"Password\"\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <input\r\n                type=\"text\"\r\n                value={this.state.collegeIDInput}\r\n                onChange={this.handleCollegeIDInput}\r\n                placeholder=\"College ID\"\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                value={this.state.rollNumberInput}\r\n                onChange={this.handleRollNumberInput}\r\n                placeholder=\"Roll Number\"\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          {this.renderButton(this.state.toggleButtonId)}\r\n        </div>\r\n        {this.state.loading ? (\r\n          <Box sx={{ marginTop: \"2.5%\" }}>\r\n            <LinearProgress />\r\n          </Box>\r\n        ) : null}\r\n\r\n        {this.state.alert && (\r\n          <Alert\r\n            severity={this.state.error ? \"error\" : \"success\"}\r\n            sx={{ margin: \"1.5% 0\" }}\r\n          >\r\n            {this.state.alertMessage}\r\n          </Alert>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AdminLoginForm;\r\n","import \"../navbar/Navbar.css\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav>\r\n      <div>\r\n        <h1>{props.heading}</h1>\r\n        <h4>{props.subHeading}</h4>\r\n      </div>\r\n      {props.button && <div className='Nav-btn'><button onClick={props.button.onClick}>{props.button.text}</button></div>}\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import AdminLoginForm from \"../../components/admin_login_form/AdminLoginForm\";\r\nimport Navbar from \"../../components/navbar/Navbar\";\r\nimport \"../home_page/HomePage.css\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nfunction HomePage() {\r\n  return (\r\n    <div id=\"HomePage\">\r\n      <Navbar heading=\"Result Management System (R.M.S)\"/>\r\n      <div id=\"HomePageContent\">\r\n        <AdminLoginForm history={useHistory()}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport \"../pop_up/PopUp.css\";\r\n\r\nfunction PopUp(props) {\r\n  return (\r\n    <div className=\"PopUp\">\r\n      <div className=\"PopUp-content\">\r\n        <span className=\"Close-btn\" onClick={props.closePopUp}>\r\n          x\r\n        </span>\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PopUp;\r\n","import React from \"react\";\r\nimport \"./ClassForm.css\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport { Box } from \"@mui/system\";\r\nimport { LinearProgress } from \"@mui/material\";\r\nimport { createClass, isClassNameUnique } from \"../../services/firebase\";\r\n\r\nclass ClassForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      subjects: [{ subjectName: \"\", totalMarks: \"\" }],\r\n      className: \"\",\r\n      classRelatedError: false,\r\n      classErrorMessage: null,\r\n      subjectRelatedError: false,\r\n      subjectErrorMessage: null,\r\n      processing: false,\r\n    };\r\n    this.addSubject = this.addSubject.bind(this);\r\n    this.deleteSubject = this.deleteSubject.bind(this);\r\n    this.handleSubjectNameInput = this.handleSubjectNameInput.bind(this);\r\n    this.handleSubjectMarksInput = this.handleSubjectMarksInput.bind(this);\r\n    this.handleClassNameInput = this.handleClassNameInput.bind(this);\r\n    this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n  }\r\n\r\n  handleClassNameInput(e) {\r\n    this.setState({ className: e.target.value });\r\n  }\r\n\r\n  addSubject() {\r\n    this.setState((prevState) => ({\r\n      subjects: [...prevState.subjects, { subjectName: \"\", totalMarks: \"\" }],\r\n    }));\r\n  }\r\n\r\n  deleteSubject(e) {\r\n    const index = e.target.name;\r\n    const subjects = this.state.subjects;\r\n    subjects.splice(index, 1);\r\n    this.setState({ subjects: subjects });\r\n  }\r\n\r\n  handleSubjectNameInput(e) {\r\n    const index = e.target.name;\r\n    const subjects = this.state.subjects;\r\n    subjects[index].subjectName = e.target.value;\r\n    this.setState({ subjects: subjects });\r\n  }\r\n\r\n  handleSubjectMarksInput(e) {\r\n    const index = e.target.name;\r\n    const subjects = this.state.subjects;\r\n    const marks = parseInt(e.target.value);\r\n    subjects[index].totalMarks = isNaN(marks) ? \"\" : marks;\r\n    this.setState({ subjects: subjects });\r\n  }\r\n\r\n  renderSubjects() {\r\n    return this.state.subjects.map((subject, index) => (\r\n      <tr>\r\n        <td>\r\n          <input\r\n            type=\"text\"\r\n            name={index}\r\n            value={subject.subjectName}\r\n            onChange={this.handleSubjectNameInput}\r\n          />\r\n        </td>\r\n        <td>\r\n          <input\r\n            type=\"number\"\r\n            max=\"100\"\r\n            min=\"0\"\r\n            name={index}\r\n            value={subject.totalMarks}\r\n            onChange={this.handleSubjectMarksInput}\r\n          ></input>\r\n        </td>\r\n        {this.state.subjects.length !== 1 && (\r\n          <td>\r\n            <button name={index} onClick={this.deleteSubject}>\r\n              Remove\r\n            </button>\r\n          </td>\r\n        )}\r\n      </tr>\r\n    ));\r\n  }\r\n\r\n  removePrevError() {\r\n    this.setState({ classRelatedError: false, subjectRelatedError: false });\r\n  }\r\n\r\n  async validateForm() {\r\n    this.removePrevError();\r\n    if (this.state.className.length === 0) {\r\n      this.setState({\r\n        classRelatedError: true,\r\n        classErrorMessage: \"Class name can't be left empty!\",\r\n      });\r\n      return false;\r\n    }\r\n    if (!(await isClassNameUnique(this.state.className, this.props.collegeID))) {\r\n      this.setState({ classRelatedError: true, classErrorMessage: 'This class name is already taken!' });\r\n      return false;\r\n    }\r\n    const subjects = this.state.subjects;\r\n    for (let i = 0; i < subjects.length; ++i) {\r\n      if (\r\n        subjects[i].subjectName.length === 0 ||\r\n        subjects[i].totalMarks.length === 0\r\n      ) {\r\n        this.setState({\r\n          subjectRelatedError: true,\r\n          subjectErrorMessage: \"Some subject's fields are left blank!\",\r\n        });\r\n        return false;\r\n      }\r\n      const marks = parseInt(subjects[i].totalMarks);\r\n      if (marks <= 0) {\r\n        this.setState({\r\n          subjectRelatedError: true,\r\n          subjectErrorMessage: \"Total marks can't be negative!\",\r\n        });\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  async handleOnSubmit() {\r\n    this.setState({ processing: true });\r\n    if (await this.validateForm()) {\r\n      await createClass(\r\n        this.props.collegeID,\r\n        this.state.className,\r\n        this.state.subjects\r\n      );\r\n      this.props.closePopUp();\r\n    }\r\n    this.setState({ processing: false });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ClassFormContainer\">\r\n        <h2>ADD NEW CLASS</h2>\r\n        <div className=\"ClassForm\">\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.className}\r\n            onChange={this.handleClassNameInput}\r\n            placeholder=\"Class Name\"\r\n            required\r\n          />\r\n          {this.state.classRelatedError && (\r\n            <Alert severity=\"error\" sx={{ marginBottom: \"1.0%\" }}>\r\n              {this.state.classErrorMessage}\r\n            </Alert>\r\n          )}\r\n\r\n          <hr />\r\n          <h3>Subjects</h3>\r\n          {this.state.subjects.length !== 0 && (\r\n            <table>\r\n              <tr>\r\n                <th>Subject Name</th>\r\n                <th>Total Marks</th>\r\n              </tr>\r\n              {this.renderSubjects()}\r\n            </table>\r\n          )}\r\n          {this.state.subjectRelatedError && (\r\n            <Alert severity=\"error\" sx={{ marginBottom: \"1.0%\" }}>\r\n              {this.state.subjectErrorMessage}\r\n            </Alert>\r\n          )}\r\n          {this.state.processing && (\r\n            <Box sx={{ marginBottom: \"1.0%\" }}>\r\n              <LinearProgress />\r\n            </Box>\r\n          )}\r\n          <button onClick={this.addSubject}>Add Subject</button>\r\n          <button onClick={this.handleOnSubmit}>Submit</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClassForm;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { userExist } from \"../../services/firebase\";\r\nimport \"../class_card/ClassCard.css\";\r\n\r\nexport default function ClassCard(props) {\r\n  const history = useHistory();\r\n\r\n  function OnView() {\r\n    if (userExist())\r\n      history.push(\"/class\", {\r\n        className: props.className,\r\n        collegeID: props.collegeID,\r\n      });\r\n    else history.push(\"/\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"ClassCard\">\r\n      <p className=\"S-no\">{props.index + 1}</p>\r\n      <p className=\"ClassName\">{props.className}</p>\r\n      <button onClick={OnView}>View</button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Navbar from \"../../components/navbar/Navbar\";\r\nimport PopUp from \"../../components/pop_up/PopUp\";\r\nimport {\r\n  getCollegeName,\r\n  getCollegeID,\r\n  firestore,\r\n  signOutRms,\r\n  userExist,\r\n  currentUserEmail,\r\n} from \"../../services/firebase\";\r\nimport \"../admin_panel/AdminPanel.css\";\r\nimport { collection, onSnapshot } from \"@firebase/firestore\";\r\nimport ClassForm from \"../../components/class_form/ClassForm\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport ClassCard from \"../../components/class_card/ClassCard\";\r\n\r\nclass AdminPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      collegeName: null,\r\n      collegeID: null,\r\n      popUp: false,\r\n      classes: [],\r\n    };\r\n    this.unsubscribe = null;\r\n    this.togglePopUp = this.togglePopUp.bind(this);\r\n    this.signOut = this.signOut.bind(this);\r\n  }\r\n\r\n  togglePopUp() {\r\n    if (userExist()) this.setState({ popUp: !this.state.popUp });\r\n    else this.props.history.push(\"/\");\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if(userExist() === false){\r\n      alert('Sign In Required.')\r\n      this.props.history.push(\"/\");\r\n      return;\r\n    }\r\n    const collegeID = await getCollegeID(currentUserEmail());\r\n    const collegeName = await getCollegeName(collegeID);\r\n    this.setState({ collegeName: collegeName, collegeID: collegeID });\r\n\r\n    this.unsubscribe = await onSnapshot(\r\n      collection(firestore, \"college\", collegeID.toString(), \"classes\"),\r\n      (snapshot) => {\r\n        const docs = snapshot.docs;\r\n\r\n        if (docs.length === 0) return;\r\n\r\n        const classes = [];\r\n        docs.forEach((doc) => {\r\n          classes.push(doc.data()[\"class-name\"]);\r\n        });\r\n        this.setState({ classes: classes });\r\n      },\r\n      (error) => {\r\n        alert(\"Error(AdminPanel): \" + error.message);\r\n      }\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if(this.unsubscribe !== null)\r\n      this.unsubscribe();\r\n  }\r\n\r\n  async signOut() {\r\n    if (userExist()) {\r\n      await signOutRms();\r\n    }\r\n    this.props.history.push(\"/\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"AdminPanel\">\r\n        <Navbar\r\n          heading={this.state.collegeName}\r\n          subHeading={`College ID (${this.state.collegeID})`}\r\n          button={{ text: \"Sign Out\", onClick: this.signOut }}\r\n        />\r\n\r\n        {this.state.popUp && (\r\n          <PopUp closePopUp={this.togglePopUp}>\r\n            <ClassForm\r\n              collegeID={this.state.collegeID}\r\n              closePopUp={this.togglePopUp}\r\n            />\r\n          </PopUp>\r\n        )}\r\n        {this.state.classes.length === 0 ? (\r\n          <Alert severity=\"info\" sx={{ margin: \"2.5% 1.0%\" }}>\r\n            No classes created yet!\r\n          </Alert>\r\n        ) : (\r\n          <h3>AVAILABLE CLASSES</h3>\r\n        )}\r\n        {this.state.classes.map((className, index) => (\r\n          <ClassCard\r\n            key={index}\r\n            className={className}\r\n            collegeID={this.state.collegeID}\r\n            index={index}\r\n          />\r\n        ))}\r\n        <button onClick={this.togglePopUp}>Create Class</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(AdminPanel);\r\n","import { CircularProgress } from \"@mui/material\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { getResult } from \"../../services/firebase\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport \"./Result.css\";\r\n\r\nexport default function Result(props) {\r\n  const [result, setResult] = useState(null);\r\n  const location = useLocation();\r\n  const collegeID = location.state.collegeID;\r\n  const rollNumber = location.state.rollNumber;\r\n\r\n  let totalObtainedMarks = 0;\r\n  let totalMarks = 0;\r\n\r\n  useEffect(() => {\r\n    if (result === null) {\r\n      getStudentDetails();\r\n    }\r\n  });\r\n\r\n  const getStudentDetails = async () => {\r\n    const result = await getResult(collegeID, rollNumber);\r\n    setResult(result);\r\n  };\r\n\r\n  function renderMarks() {\r\n    return result.studentMarks.map((subject) => {\r\n      totalMarks += subject.totalMarks;\r\n      totalObtainedMarks += subject.marksScored;\r\n      return (\r\n        <tr>\r\n          <td>{subject.subjectName}</td>\r\n          <td>{subject.marksScored}</td>\r\n          <td>{subject.totalMarks}</td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n\r\n  function generateResult() {\r\n    return (\r\n      <div className=\"Result\">\r\n        <h1>{result.collegeName}</h1>\r\n        <h4>{`College ID(${collegeID})`}</h4>\r\n        <hr />\r\n        <h4>{result.className}</h4>\r\n        <div className=\"NameRollNo\">\r\n          <p>\r\n            <b>Student Roll.No: </b>\r\n            {rollNumber}\r\n          </p>\r\n          <p>\r\n            <b>Student Name: </b>\r\n            {result.studentName}\r\n          </p>\r\n        </div>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Subject</th>\r\n              <th>Marks Obtained</th>\r\n              <th>Max Available Marks</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{renderMarks()}</tbody>\r\n        </table>\r\n        <p>\r\n          <b>Total Marks: </b>\r\n          {totalObtainedMarks}/{totalMarks}\r\n        </p>\r\n        <p>\r\n          <b>C.G.P.A: </b>\r\n          {((totalObtainedMarks / totalMarks) * 10).toFixed(1)}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"ResultContainer\">\r\n      {result === null ? <CircularProgress /> : generateResult()}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./StudentForm.css\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport { Box } from \"@mui/system\";\r\nimport { LinearProgress } from \"@mui/material\";\r\nimport {\r\n  getSubjects,\r\n  addStudent,\r\n  isUniqueRollNumber,\r\n} from \"../../services/firebase\";\r\n\r\nclass StudentForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      studentName: \"\",\r\n      studentRollNumber: \"\",\r\n      subjects: [],\r\n      studentRelatedError: false,\r\n      marksRelatedError: false,\r\n      studentRelatedErrorMessage: null,\r\n      marksRelatedErrorMessage: null,\r\n      processing: false,\r\n    };\r\n    this.handleSubjectMarksInput = this.handleSubjectMarksInput.bind(this);\r\n    this.handleStudentNameInput = this.handleStudentNameInput.bind(this);\r\n    this.handleStudentRollNumberInput =\r\n      this.handleStudentRollNumberInput.bind(this);\r\n    this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n  }\r\n\r\n  handleStudentNameInput(e) {\r\n    this.setState({ studentName: e.target.value });\r\n  }\r\n\r\n  handleStudentRollNumberInput(e) {\r\n    this.setState({ studentRollNumber: e.target.value });\r\n  }\r\n\r\n  handleSubjectMarksInput(e) {\r\n    const index = e.target.name;\r\n    const subjects = this.state.subjects;\r\n    const marks = parseInt(e.target.value);\r\n    subjects[index].marksScored = isNaN(marks) ? \"\" : marks;\r\n    this.setState({ subjects: subjects });\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const subjects = await getSubjects(\r\n      this.props.className,\r\n      this.props.collegeID\r\n    );\r\n    for (let i = 0; i < subjects.length; ++i)\r\n      subjects[i] = { ...subjects[i], marksScored: \"\" };\r\n    this.setState({ subjects: subjects });\r\n  }\r\n\r\n  renderSubjects() {\r\n    return this.state.subjects.map((subject, index) => (\r\n      <tr>\r\n        <td>\r\n          <input\r\n            type=\"text\"\r\n            name={index}\r\n            value={this.state.subjects[index].subjectName}\r\n            readOnly\r\n          />\r\n        </td>\r\n        <td>\r\n          <input\r\n            type=\"number\"\r\n            max={this.state.subjects[index].totalMarks}\r\n            min=\"0\"\r\n            name={index}\r\n            value={subject.marksScored}\r\n            onChange={this.handleSubjectMarksInput}\r\n          ></input>\r\n        </td>\r\n        <td>\r\n          <b>/{this.state.subjects[index].totalMarks}</b>\r\n        </td>\r\n      </tr>\r\n    ));\r\n  }\r\n\r\n  removePrevError() {\r\n    this.setState({ studentRelatedError: false, marksRelatedError: false });\r\n  }\r\n\r\n  async validateForm() {\r\n    this.removePrevError();\r\n    if (\r\n      this.state.studentName.length === 0 ||\r\n      this.state.studentRollNumber.length === 0\r\n    ) {\r\n      this.setState({\r\n        studentRelatedError: true,\r\n        studentRelatedErrorMessage:\r\n          this.state.studentName.length === 0\r\n            ? \"Student name can't be left empty!\"\r\n            : \"Roll Number can't be left empty!\",\r\n      });\r\n      return false;\r\n    }\r\n\r\n    if (\r\n      !(await isUniqueRollNumber(\r\n        this.props.collegeID,\r\n        this.state.studentRollNumber\r\n      ))\r\n    ) {\r\n      this.setState({\r\n        studentRelatedError: true,\r\n        studentRelatedErrorMessage: \"Roll Number already exist!\",\r\n      });\r\n      return false;\r\n    }\r\n    const subjects = this.state.subjects;\r\n    for (let i = 0; i < subjects.length; ++i) {\r\n      if (subjects[i].marksScored.toString().length === 0) {\r\n        this.setState({\r\n          marksRelatedError: true,\r\n          marksRelatedErrorMessage: `${subjects[i].subjectName} marks are left blank!`,\r\n        });\r\n        return false;\r\n      }\r\n      const totalMarks = parseInt(subjects[i].totalMarks);\r\n      const studentMarks = parseInt(subjects[i].marksScored);\r\n      if (studentMarks < 0 || studentMarks > totalMarks) {\r\n        this.setState({\r\n          marksRelatedError: true,\r\n          marksRelatedErrorMessage:\r\n            studentMarks < 0\r\n              ? `Marks can't be negative in ${subjects[i].subjectName}!`\r\n              : `In ${subjects[i].subjectName}, marks can't exceed ${totalMarks}`,\r\n        });\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  async handleOnSubmit() {\r\n    this.setState({ processing: true });\r\n\r\n    if (await this.validateForm()) {\r\n      await addStudent(\r\n        this.props.className,\r\n        this.props.collegeID,\r\n        this.state.studentName,\r\n        this.state.studentRollNumber,\r\n        this.state.subjects\r\n      );\r\n      this.props.closePopUp();\r\n    }\r\n    this.setState({ processing: false });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"StudentFromContainer\">\r\n        <h2>ADD NEW STUDENT</h2>\r\n        <div className=\"StudentForm\">\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.className}\r\n            onChange={this.handleStudentNameInput}\r\n            placeholder=\"Student Name\"\r\n          />\r\n\r\n          <input\r\n            type=\"number\"\r\n            min={0}\r\n            value={this.state.studentRollNumber}\r\n            onChange={this.handleStudentRollNumberInput}\r\n            placeholder=\"Student Roll Number\"\r\n          />\r\n          {this.state.studentRelatedError && (\r\n            <Alert severity=\"error\" sx={{ marginBottom: \"1.0%\" }}>\r\n              {this.state.studentRelatedErrorMessage}\r\n            </Alert>\r\n          )}\r\n\r\n          <hr />\r\n          <h3>Student Marks</h3>\r\n          {this.state.subjects.length !== 0 && (\r\n            <table>\r\n              <tr>\r\n                <th>Subject Name</th>\r\n                <th>Marks</th>\r\n              </tr>\r\n              {this.renderSubjects()}\r\n            </table>\r\n          )}\r\n          {this.state.marksRelatedError && (\r\n            <Alert severity=\"error\" sx={{ marginBottom: \"1.0%\" }}>\r\n              {this.state.marksRelatedErrorMessage}\r\n            </Alert>\r\n          )}\r\n          {this.state.processing && (\r\n            <Box sx={{ marginBottom: \"1.0%\" }}>\r\n              <LinearProgress />\r\n            </Box>\r\n          )}\r\n          <button onClick={this.handleOnSubmit}>Add Student</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StudentForm;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { userExist } from \"../../services/firebase\";\r\nimport \"../student_card/StudentCard.css\";\r\n\r\nexport default function StudentCard(props) {\r\n  const history = useHistory();\r\n\r\n  function OnView() {\r\n    if (userExist())\r\n      history.push(\"/studentResult\", {\r\n        collegeID: props.collegeID,\r\n        rollNumber: props.rollNumber,\r\n      });\r\n    else history.push(\"/\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"StudentCard\">\r\n      <p className=\"RollNumber\">{props.rollNumber}</p>\r\n      <p className=\"StudentName\">{props.studentName}</p>\r\n      <button onClick={OnView}>View</button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Navbar from \"../../components/navbar/Navbar\";\r\nimport PopUp from \"../../components/pop_up/PopUp\";\r\nimport { firestore, userExist } from \"../../services/firebase\";\r\nimport { collection, onSnapshot } from \"@firebase/firestore\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport \"../class_panel/ClassPanel.css\";\r\nimport StudentForm from \"../../components/subject_form/StudentFrom\";\r\nimport StudentCard from \"../../components/student_card/StudentCard\";\r\n\r\nclass ClassPanel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      popUp: false,\r\n      students: [],\r\n    };\r\n    this.className = this.props.location.state.className;\r\n    this.collegeID = this.props.location.state.collegeID;\r\n    this.unsubscribe = null;\r\n    this.togglePopUp = this.togglePopUp.bind(this);\r\n  }\r\n\r\n  togglePopUp() {\r\n    if (userExist()) this.setState({ popUp: !this.state.popUp });\r\n    else this.props.history.push(\"/\");\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (userExist() === false) {\r\n      alert(\"Sign In Required.\");\r\n      this.props.history.push(\"/\");\r\n      return;\r\n    }\r\n    this.unsubscribe = await onSnapshot(\r\n      collection(\r\n        firestore,\r\n        \"college\",\r\n        this.collegeID.toString(),\r\n        \"classes\",\r\n        this.className,\r\n        \"enrolled-students\"\r\n      ),\r\n      (snapshot) => {\r\n        const docs = snapshot.docs;\r\n\r\n        if (docs.length === 0) return;\r\n\r\n        const students = [];\r\n        docs.forEach((doc) => {\r\n          const student = doc.data();\r\n          students.push({\r\n            studentRollNumber: student[\"student-roll-no\"],\r\n            studentName: student[\"student-name\"],\r\n          });\r\n        });\r\n        this.setState({ students: students });\r\n      },\r\n      (error) => {\r\n        alert(\"Error(AdminPanel): \");\r\n      }\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if(this.unsubscribe !== null)\r\n      this.unsubscribe();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"ClassPanel\">\r\n        <Navbar heading={this.className} />\r\n\r\n        {this.state.popUp && (\r\n          <PopUp closePopUp={this.togglePopUp}>\r\n            <StudentForm\r\n              collegeID={this.collegeID}\r\n              className={this.className}\r\n              closePopUp={this.togglePopUp}\r\n            />\r\n          </PopUp>\r\n        )}\r\n        {this.state.students.length === 0 ? (\r\n          <Alert severity=\"info\" sx={{ margin: \"1.0% 40%\" }}>\r\n            No student is enrolled in{\" \"}\r\n            <span>\r\n              <b>{this.className}</b>\r\n            </span>\r\n            !\r\n          </Alert>\r\n        ) : (\r\n          <h3>Students Enrolled</h3>\r\n        )}\r\n        {this.state.students.map((student, index) => (\r\n          <StudentCard\r\n            key={index}\r\n            studentName={student.studentName}\r\n            rollNumber={student.studentRollNumber}\r\n            collegeID={this.collegeID}\r\n          />\r\n        ))}\r\n        <button onClick={this.togglePopUp}>Add Student</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(ClassPanel);\r\n","import HomePage from \"./pages/home_page/HomePage\";\r\nimport AdminPanel from \"./pages/admin_panel/AdminPanel\";\r\nimport Result from \"./pages/result_page/Result\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport ClassPanel from \"./pages/class_panel/ClassPanel\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <HomePage />\r\n          </Route>\r\n          <Route exact path=\"/adminPanel\">\r\n            <AdminPanel/>\r\n          </Route>\r\n          <Route exact path=\"/class\">\r\n            <ClassPanel/>\r\n          </Route>\r\n          <Route exact path=\"/studentResult\">\r\n            <Result></Result>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}